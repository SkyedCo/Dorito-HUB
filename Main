setfpscap(1000)
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/UILib/main/source"))();
lib:SetTitle("Dorito Hub")
local tab1 = lib:NewTab("Mags", "")
local tab2 = lib:NewTab("Player", "Change Values")
local userInputService = game:GetService("UserInputService")
tab1:NewSlider("Mags",0,60,0,function(value)
local mouseClickConnection

mouseClickConnection = userInputService.InputBegan:Connect(function(inputObject)
if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
local startTime = tick()
while tick() - startTime < 1.5 do
    wait()
    

    for i, v in pairs (game.workspace:GetChildren()) do
  if v.Name == "Football" and v:IsA("BasePart") then
       local distance = (v.Position - game.Players.LocalPlayer.Character.CatchRight.Position).magnitude
         wait()
              if distance < value then

    v.CFrame = game.Players.LocalPlayer.Character.CatchRight.CFrame * CFrame.new(2, 2, 2)
    wait() 

    
end
end
end
  
    

    end
    

end
end)
end)

local Spoofed = {};
local Clone = game.Clone;
local oldIdx;
local oldNewIdx;
local OldNC;


local Player = game:GetService("Players").LocalPlayer;

local Methods = {
    "FindFirstChild",
    "FindFirstChildOfClass",
    "FindFirstChildWhichIsA"
}



local function SpoofProp(Instance, Property)
    local Cloned = Clone(Instance);

    table.insert(Spoofed, {
        Instance = Instance,
        Property = Property;
        ClonedInstance = Cloned;
    })
end


oldIdx = hookmetamethod(game, "__index", function(self, key)
    for i,v in next, Spoofed do
        if self == v.Instance and key == v.Property and not checkcaller() then
            return oldIdx(v.ClonedInstance, key)
        end

        if key == "Parent" and (self == v.ClonedInstance or self == v.Instance) and checkcaller() == false then
            return oldIdx(v.Instance, key)
        end
    end

    return oldIdx(self, key)
end)

oldNewIdx = hookmetamethod(game, "__newindex", function(self, key, newval, ...)
    for i,v in next, Spoofed do
        if self == v.Instance and key == v.Property and not checkcaller() then
            return oldNewIdx(v.ClonedInstance, key, newval, ...);
        end
    end
    return oldNewIdx(self, key, newval, ...)
end)

OldNC = hookmetamethod(game, "__namecall", function(self, ...)
    
    local Method = getnamecallmethod();

    if not table.find(Methods, Method) or Player.Character == nil or self ~= Player.Character then
        return OldNC(self, ...)
    end
    
    local Results = OldNC(self, ...);

    if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
        for i,v in next, Spoofed do
            if v.Instance == Results then
                return v.ClonedInstance
            end
        end
    end
    return OldNC(self, ...)
end)

for i, Method in next, Methods do
    local Old;

    Old = hookfunction(game[Method], function(self, ...)
        if not Player.Character or self ~= Player.Character then
            return Old(self, ...)
        end

        local Results = Old(self, ...);

        if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
            for i,v in next, Spoofed do
                if v.Instance == Results then
                    return v.ClonedInstance
                end
            end
        end
        return Old(self, ...)
    end)
end
tab2:NewSlider("WalkSpeed",20,40,20,function(value)

SpoofProp(Player.Character.Humanoid, "WalkSpeed")
Player.Character.Humanoid.WalkSpeed = value

Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    SpoofProp(character.Humanoid, "WalkSpeed")
    character.Humanoid.WalkSpeed = value
    end)
end)








local Spoofed = {};
local Clone = game.Clone;
local oldIdx;
local oldNewIdx;
local OldNC;


local Player = game:GetService("Players").LocalPlayer;

local Methods = {
    "FindFirstChild",
    "FindFirstChildOfClass",
    "FindFirstChildWhichIsA"
}



local function SpoofProp(Instance, Property)
    local Cloned = Clone(Instance);

    table.insert(Spoofed, {
        Instance = Instance,
        Property = Property;
        ClonedInstance = Cloned;
    })
end


oldIdx = hookmetamethod(game, "__index", function(self, key)
    for i,v in next, Spoofed do
        if self == v.Instance and key == v.Property and not checkcaller() then
            return oldIdx(v.ClonedInstance, key)
        end

        if key == "Parent" and (self == v.ClonedInstance or self == v.Instance) and checkcaller() == false then
            return oldIdx(v.Instance, key)
        end
    end

    return oldIdx(self, key)
end)

oldNewIdx = hookmetamethod(game, "__newindex", function(self, key, newval, ...)
    for i,v in next, Spoofed do
        if self == v.Instance and key == v.Property and not checkcaller() then
            return oldNewIdx(v.ClonedInstance, key, newval, ...);
        end
    end
    return oldNewIdx(self, key, newval, ...)
end)

OldNC = hookmetamethod(game, "__namecall", function(self, ...)
    
    local Method = getnamecallmethod();

    if not table.find(Methods, Method) or Player.Character == nil or self ~= Player.Character then
        return OldNC(self, ...)
    end
    
    local Results = OldNC(self, ...);

    if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
        for i,v in next, Spoofed do
            if v.Instance == Results then
                return v.ClonedInstance
            end
        end
    end
    return OldNC(self, ...)
end)

for i, Method in next, Methods do
    local Old;

    Old = hookfunction(game[Method], function(self, ...)
        if not Player.Character or self ~= Player.Character then
            return Old(self, ...)
        end

        local Results = Old(self, ...);

        if Results and Results:IsA("Humanoid") and Player.Character and self == Player.Character then
            for i,v in next, Spoofed do
                if v.Instance == Results then
                    return v.ClonedInstance
                end
            end
        end
        return Old(self, ...)
    end)
end
tab2:NewSlider("JumpPower",50,120,50,function(value)

SpoofProp(Player.Character.Humanoid, "JumpPower")
Player.Character.Humanoid.JumpPower = value

Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    SpoofProp(character.Humanoid, "JumpPower")
    character.Humanoid.JumpPower = value
    end)
end)
tab2:NewButton("No Jump Delay",function()
local uis = game:GetService("UserInputService")
local rus = game:GetService("RunService")
local cd = false
local held = false
 
uis.InputBegan:Connect(function(k)
    if k.KeyCode == Enum.KeyCode.Space then
        held = true
    end
end)
 
uis.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.Space then
            held = false
        end
    end
end)
 
rus.RenderStepped:Connect(function()
    if held == true and cd == false then
        if game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Y < 6 then
            game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
            cd = true
            wait(0.5)
            cd = false
        end
    end
end)
    
    end)

